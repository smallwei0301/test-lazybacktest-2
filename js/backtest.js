// 確保 zoom 插件正確註冊
document.addEventListener('DOMContentLoaded', function() {
    console.log('Chart object:', typeof Chart);
    console.log('Available Chart plugins:', Chart.registry ? Object.keys(Chart.registry.plugins.items) : 'No registry');
});

// --- 主回測函數 ---
function runBacktestInternal() {
    console.log("[Main] runBacktestInternal called");
    if (!workerUrl) { showError("背景計算引擎尚未準備就緒，請稍候再試或重新載入頁面。"); hideLoading(); return; }
    try {
        const params=getBacktestParams();
        console.log("[Main] Params:", params);
        const isValid = validateBacktestParams(params);
        console.log("[Main] Validation:", isValid);
        if(!isValid) return;

        const curSettings={stockNo:params.stockNo, startDate:params.startDate, endDate:params.endDate};
        const useCache=!needsDataFetch(curSettings);
        const msg=useCache?"⌛ 使用快取執行回測...":"⌛ 獲取數據並回測...";
        showLoading(msg);
        clearPreviousResults(); // Clear previous results including suggestion

        if(backtestWorker) { // Ensure previous worker is terminated
            backtestWorker.terminate();
            backtestWorker = null;
            console.log("[Main] Terminated previous worker.");
        }
        console.log("[Main] WorkerUrl:", workerUrl);
        console.log("[Main] Creating worker...");
        backtestWorker=new Worker(workerUrl);

        // Unified Worker Message Handler
        backtestWorker.onmessage=e=>{
            const{type,data,progress,message,stockNo,marketType}=e.data;
            console.log("[Main] Received message from worker:", type, data); // Debug log

            if(type==='progress'){
                updateProgress(progress);
                if(message)document.getElementById('loadingText').textContent=`⌛ ${message}`;
            } else if(type==='marketError'){
                // 處理市場查詢錯誤，顯示智慧錯誤處理對話框
                hideLoading();
                if (window.showMarketSwitchModal) {
                    window.showMarketSwitchModal(message, marketType, stockNo);
                } else {
                    console.error('[Main] showMarketSwitchModal function not found');
                    showError(message);
                }
            } else if(type==='stockNameInfo'){
                // 處理股票名稱資訊，顯示在UI上
                if (window.showStockName) {
                    window.showStockName(e.data.stockName, e.data.stockNo, e.data.marketType);
                }
            } else if(type==='result'){
                // Handle backtest result
                if(!useCache&&data?.rawData){
                     // workerCachedStockData is defined in worker.js, this might be an issue if not handled correctly
                     // For now, we assume cachedStockData in the main thread is the source of truth if worker needs it.
                     cachedStockData = data.rawData;
                     lastFetchSettings=curSettings;
                     console.log(`[Main] Data cached for ${curSettings.stockNo}.`);
                } else if (useCache && cachedStockData ) {
                     console.log("[Main] Using main thread cached data for worker if needed.");
                } else if(!useCache) {
                     console.warn("[Main] No rawData to cache from backtest.");
                }
                handleBacktestResult(data); // Process and display main results

                // Request suggestion AFTER processing main results
                getSuggestion();

            } else if(type==='suggestionResult'){
                const suggestionArea = document.getElementById('today-suggestion-area');
                const suggestionText = document.getElementById('suggestion-text');
                if(suggestionArea && suggestionText){
                    suggestionText.textContent = data.suggestion || '無法取得建議';
                    suggestionArea.classList.remove('hidden', 'loading');
                     suggestionArea.className = 'my-4 p-4 border-l-4 rounded-md text-center'; // Base classes
                    if (data.suggestion === '做多買入' || data.suggestion === '持有 (多)') { suggestionArea.classList.add('bg-green-50', 'border-green-500', 'text-green-800'); }
                    else if (data.suggestion === '做空賣出' || data.suggestion === '持有 (空)') { suggestionArea.classList.add('bg-red-50', 'border-red-500', 'text-red-800'); }
                    else if (data.suggestion === '做多賣出' || data.suggestion === '做空回補') { suggestionArea.classList.add('bg-yellow-50', 'border-yellow-500', 'text-yellow-800'); }
                    else if (data.suggestion === '等待') { suggestionArea.classList.add('bg-gray-100', 'border-gray-400', 'text-gray-600'); }
                     else { suggestionArea.classList.add('bg-gray-100', 'border-gray-400', 'text-gray-600'); }

                    hideLoading();
                    showSuccess("回測完成！");
                    if(backtestWorker) backtestWorker.terminate(); backtestWorker = null;
                }
            } else if(type==='suggestionError'){
                const suggestionArea = document.getElementById('today-suggestion-area');
                const suggestionText = document.getElementById('suggestion-text');
                if(suggestionArea && suggestionText){
                    suggestionText.textContent = data.message || '計算建議時發生錯誤';
                    suggestionArea.classList.remove('hidden', 'loading');
                    suggestionArea.className = 'my-4 p-4 bg-red-100 border-l-4 border-red-500 text-red-700 rounded-md text-center';
                }
                 hideLoading();
                 showError("回測完成，但計算建議時發生錯誤。");
                 if(backtestWorker) backtestWorker.terminate(); backtestWorker = null;
            } else if(type==='error'){
                showError(data?.message||'回測過程錯誤');
                if(backtestWorker)backtestWorker.terminate(); backtestWorker=null;
                hideLoading();
                const suggestionArea = document.getElementById('today-suggestion-area');
                 if (suggestionArea) suggestionArea.classList.add('hidden');
            }
        };

        backtestWorker.onerror=e=>{
             showError(`Worker錯誤: ${e.message}`); console.error("[Main] Worker Error:",e);
             if(backtestWorker)backtestWorker.terminate(); backtestWorker=null;
             hideLoading();
             const suggestionArea = document.getElementById('today-suggestion-area');
              if (suggestionArea) suggestionArea.classList.add('hidden');
        };

        const workerMsg={type:'runBacktest', params:params, useCachedData:useCache};
        if(useCache && cachedStockData) {
            workerMsg.cachedData = cachedStockData; // Send main thread cache to worker
            console.log("[Main] Sending cached data to worker for backtest.");
        } else {
            console.log("[Main] Fetching new data for backtest.");
        }
        backtestWorker.postMessage(workerMsg);

    } catch (error) {
        console.error("[Main] Error in runBacktestInternal:", error);
        showError(`執行回測時發生錯誤: ${error.message}`);
        hideLoading();
        const suggestionArea = document.getElementById('today-suggestion-area');
        if (suggestionArea) suggestionArea.classList.add('hidden');
        if(backtestWorker)backtestWorker.terminate(); backtestWorker = null;
    }
}

// **修改：clearPreviousResults - 確保訊息區重置**
function clearPreviousResults() {
    document.getElementById("backtest-result").innerHTML=`<p class="text-gray-500">請執行回測</p>`;
    document.getElementById("trade-results").innerHTML=`<p class="text-gray-500">請執行回測</p>`;
    document.getElementById("optimization-results").innerHTML=`<p class="text-gray-500">請執行優化</p>`;
    document.getElementById("performance-table-container").innerHTML=`<p class="text-gray-500">請先執行回測以生成期間績效數據。</p>`;
    if(stockChart){
        stockChart.destroy(); 
        stockChart=null; 
        const chartContainer = document.getElementById('chart-container');
        if (chartContainer) {
            chartContainer.innerHTML = '<canvas id="chart" class="w-full h-full absolute inset-0"></canvas><div class="text-muted text-center" style="color: var(--muted-foreground);"><i data-lucide="bar-chart-3" class="lucide w-12 h-12 mx-auto mb-2 opacity-50"></i><p>執行回測後將顯示淨值曲線</p></div>';
            // Re-initialize Lucide icons
            if (typeof lucide !== 'undefined' && lucide.createIcons) {
                lucide.createIcons();
            }
        }
    }
    const resEl=document.getElementById("result");
    resEl.className = 'my-6 p-4 bg-blue-100 border-l-4 border-blue-500 text-blue-700 rounded-md';
    resEl.innerHTML = `<i class="fas fa-info-circle mr-2"></i> 請設定參數並執行。`;
    lastOverallResult = null; lastSubPeriodResults = null;
    
    // 不要在這裡隱藏優化進度，讓優化函數自己控制
    // hideOptimizationProgress();
    
    const suggestionArea = document.getElementById('today-suggestion-area');
    const suggestionText = document.getElementById('suggestion-text');
    if (suggestionArea && suggestionText) {
        suggestionArea.classList.add('hidden');
        suggestionArea.className = 'my-4 p-4 bg-yellow-50 border-l-4 border-yellow-500 text-yellow-800 rounded-md text-center hidden'; // Reset style and hide
        suggestionText.textContent = "-";
    }
}
// --- 結果顯示函數 ---
function displayPerformanceTable(subPeriodResults) { const container = document.getElementById('performance-table-container'); if (!lastOverallResult) { container.innerHTML = `<p class="text-gray-500">請先執行回測以生成績效數據。</p>`; return; } const periods = subPeriodResults ? Object.keys(subPeriodResults) : []; const periodOrder = {'1M': 1, '6M': 2, '1Y': 3, '2Y': 4, '3Y': 5, '4Y': 6, '5Y': 7, '6Y': 8, '7Y': 9, '8Y': 10, '9Y': 11, '10Y': 12}; periods.sort((a, b) => (periodOrder[a] || 99) - (periodOrder[b] || 99)); let tableHtml = ` <div class="overflow-x-auto"> <table class="w-full text-sm text-left text-gray-500"> <thead class="text-xs text-gray-700 uppercase bg-gray-50"> <tr> <th scope="col" class="px-4 py-3">期間</th> <th scope="col" class="px-4 py-3">策略累積報酬 (%)</th> <th scope="col" class="px-4 py-3">買入持有累積報酬 (%)</th> <th scope="col" class="px-4 py-3">夏普值 (策略)</th> <th scope="col" class="px-4 py-3">索提諾比率 (策略)</th> <th scope="col" class="px-4 py-3">最大回撤 (策略 %)</th> </tr> </thead> <tbody>`; periods.forEach(period => { const data = subPeriodResults ? subPeriodResults[period] : null; if (data) { const totalReturn = data.totalReturn?.toFixed(2) ?? 'N/A'; const totalBhReturn = data.totalBuyHoldReturn?.toFixed(2) ?? 'N/A'; const sharpe = data.sharpeRatio?.toFixed(2) ?? 'N/A'; const sortino = data.sortinoRatio ? (isFinite(data.sortinoRatio) ? data.sortinoRatio.toFixed(2) : '∞') : 'N/A'; const maxDD = data.maxDrawdown?.toFixed(2) ?? 'N/A'; const returnClass = (data.totalReturn ?? 0) >= 0 ? 'text-green-600' : 'text-red-600'; const bhReturnClass = (data.totalBuyHoldReturn ?? 0) >= 0 ? 'text-green-600' : 'text-red-600'; tableHtml += ` <tr class="border-b hover:bg-gray-50"> <td class="px-4 py-2 font-medium text-gray-900 whitespace-nowrap">${period}</td> <td class="px-4 py-2 ${returnClass}">${totalReturn === 'N/A' ? totalReturn : totalReturn + '%'}</td> <td class="px-4 py-2 ${bhReturnClass}">${totalBhReturn === 'N/A' ? totalBhReturn : totalBhReturn + '%'}</td> <td class="px-4 py-2">${sharpe}</td> <td class="px-4 py-2">${sortino}</td> <td class="px-4 py-2 text-red-600">${maxDD}%</td> </tr>`; } }); tableHtml += `</tbody></table></div>`; container.innerHTML = tableHtml; } function handleBacktestResult(result) { console.log("[Main] handleBacktestResult received:", result); const suggestionArea = document.getElementById('today-suggestion-area'); if(!result||!result.dates||result.dates.length===0){ showError("回測結果無效或無數據"); lastOverallResult = null; lastSubPeriodResults = null; if (suggestionArea) suggestionArea.classList.add('hidden'); hideLoading(); return; } try { lastOverallResult = result; lastSubPeriodResults = result.subPeriodResults; displayBacktestResult(result); displayTradeResults(result); renderChart(result); displayPerformanceTable(lastSubPeriodResults); activateTab('summary'); // 回測結束後自動滾動到淨值曲線圖 setTimeout(() => { const chartContainer = document.getElementById('chart-container'); if (chartContainer) { chartContainer.scrollIntoView({ behavior: 'smooth', block: 'center' }); } }, 500); // 等待500ms確保圖表已渲染完成 } catch (error) { console.error("[Main] Error processing backtest result:", error); showError(`處理回測結果時發生錯誤: ${error.message}`); if (suggestionArea) suggestionArea.classList.add('hidden'); hideLoading(); if(backtestWorker) backtestWorker.terminate(); backtestWorker = null; } } function displayBacktestResult(result) { console.log("[Main] displayBacktestResult called."); const el = document.getElementById("backtest-result"); if (!el) { console.error("[Main] Element 'backtest-result' not found"); return; } if (!result) { el.innerHTML = `<p class="text-gray-500">無效結果</p>`; return; } const entryKey = result.entryStrategy; const exitKeyRaw = result.exitStrategy; const exitInternalKey = (['ma_cross','macd_cross','k_d_cross','ema_cross'].includes(exitKeyRaw)) ? `${exitKeyRaw}_exit` : exitKeyRaw; const entryDesc = strategyDescriptions[entryKey] || { name: result.entryStrategy || 'N/A', desc: 'N/A' }; const exitDesc = strategyDescriptions[exitInternalKey] || { name: result.exitStrategy || 'N/A', desc: 'N/A' }; let shortEntryDesc = null, shortExitDesc = null; if (result.enableShorting && result.shortEntryStrategy && result.shortExitStrategy) { shortEntryDesc = strategyDescriptions[result.shortEntryStrategy] || { name: result.shortEntryStrategy, desc: 'N/A' }; shortExitDesc = strategyDescriptions[result.shortExitStrategy] || { name: result.shortExitStrategy, desc: 'N/A' }; } const avgP = result.completedTrades?.length > 0 ? result.completedTrades.reduce((s, t) => s + (t.profit||0), 0) / result.completedTrades.length : 0; const maxCL = result.maxConsecutiveLosses || 0; const bhR = parseFloat(result.buyHoldReturns?.[result.buyHoldReturns.length - 1] ?? 0); const bhAnnR = result.buyHoldAnnualizedReturn ?? 0; const sharpe = result.sharpeRatio?.toFixed(2) ?? 'N/A'; const sortino = result.sortinoRatio ? (isFinite(result.sortinoRatio) ? result.sortinoRatio.toFixed(2) : '∞') : 'N/A'; const maxDD = result.maxDrawdown?.toFixed(2) ?? 0; const totalTrades = result.tradesCount ?? 0; const winTrades = result.winTrades ?? 0; const winR = totalTrades > 0 ? (winTrades / totalTrades * 100).toFixed(1) : 0; const totalProfit = result.totalProfit ?? 0; const returnRate = result.returnRate ?? 0; const annualizedReturn = result.annualizedReturn ?? 0; const finalValue = result.finalValue ?? result.initialCapital; let annReturnRatioStr = 'N/A'; let sharpeRatioStr = 'N/A'; if (result.annReturnHalf1 !== null && result.annReturnHalf2 !== null && result.annReturnHalf1 !== 0) { annReturnRatioStr = (result.annReturnHalf2 / result.annReturnHalf1).toFixed(2); } if (result.sharpeHalf1 !== null && result.sharpeHalf2 !== null && result.sharpeHalf1 !== 0) { sharpeRatioStr = (result.sharpeHalf2 / result.sharpeHalf1).toFixed(2); } const overfittingTooltip = `比較回測期間前後兩半段的表現，以評估策略的穩定性。
比值接近 1 表示策略在不同時期表現一致，過高或過低可能表示過擬合。
公式：後半段指標 / 前半段指標`; let performanceHtml = ` <div class="mb-8"> <h4 class="text-lg font-semibold mb-6" style="color: var(--foreground);">績效指標</h4> <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4"> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, var(--primary) 8%, var(--background)) 0%, color-mix(in srgb, var(--primary) 4%, var(--background)) 100%); border-color: color-mix(in srgb, var(--primary) 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--primary);">年化報酬率</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">將總報酬率根據實際回測期間（從第一個有效數據點到最後一個數據點）轉換為年平均複利報酬率。<br>公式：((最終價值 / 初始本金)^(1 / 年數) - 1) * 100%<br>注意：此數值對回測時間長度敏感，短期高報酬可能導致極高的年化報酬率。</span> </span> </div> <p class="text-2xl font-bold ${annualizedReturn>=0?'text-emerald-600':'text-rose-600'}">${annualizedReturn>=0?'+':''}${annualizedReturn.toFixed(2)}%</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: color-mix(in srgb, var(--muted) 15%, var(--background)); border-color: color-mix(in srgb, var(--border) 80%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--muted-foreground);">買入持有年化</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">在相同實際回測期間內，單純買入並持有該股票的年化報酬率。公式同上，但使用股價計算。</span> </span> </div> <p class="text-2xl font-bold ${bhAnnR>=0?'text-emerald-600':'text-rose-600'}">${bhAnnR>=0?'+':''}${bhAnnR.toFixed(2)}%</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, #10b981 8%, var(--background)) 0%, color-mix(in srgb, #10b981 4%, var(--background)) 100%); border-color: color-mix(in srgb, #10b981 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium text-emerald-600">總報酬率</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">策略最終總資產相對於初始本金的報酬率。<br>公式：(最終價值 - 初始本金) / 初始本金 * 100%<br>此為線性報酬率，不考慮時間因素。</span> </span> </div> <p class="text-2xl font-bold ${returnRate>=0?'text-emerald-600':'text-rose-600'}">${returnRate>=0?'+':''}${returnRate.toFixed(2)}%</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, var(--accent) 8%, var(--background)) 0%, color-mix(in srgb, var(--accent) 4%, var(--background)) 100%); border-color: color-mix(in srgb, var(--accent) 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--accent);">Buy & Hold</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">買入持有總報酬率</span> </span> </div> <p class="text-2xl font-bold ${bhR>=0?'text-emerald-600':'text-rose-600'}">${bhR>=0?'+':''}${bhR.toFixed(2)}%</p> </div> </div> </div> </div>`; let riskHtml = ` <div class="mb-8"> <h4 class="text-lg font-semibold mb-6" style="color: var(--foreground);">風險指標</h4> <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4"> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, #ef4444 8%, var(--background)) 0%, color-mix(in srgb, #ef4444 4%, var(--background)) 100%); border-color: color-mix(in srgb, #ef4444 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium text-rose-600">最大回撤</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">策略**總資金**曲線從歷史最高點回落到最低點的最大百分比跌幅。公式：(峰值 - 谷值) / 峰值 * 100%</span> </span> </div> <p class="text-2xl font-bold text-rose-600">${maxDD}%</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, var(--primary) 8%, var(--background)) 0%, color-mix(in srgb, var(--primary) 4%, var(--background)) 100%); border-color: color-mix(in srgb, var(--primary) 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--primary);">夏普值</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">衡量每單位總風險(標準差)所獲得的超額報酬。通常 > 1 表示不錯，> 2 相當好，> 3 非常優秀 (相對於無風險利率)。</span> </span> </div> <p class="text-2xl font-bold" style="color: var(--primary);">${sharpe}</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background:  color-mix(in srgb, var(--muted) 12%, var(--background)); border-color: color-mix(in srgb, var(--border) 60%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--muted-foreground);">索提諾比率</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">衡量每單位 '下檔風險' 所獲得的超額報酬 (只考慮虧損的波動)。越高越好，通常用於比較不同策略承受虧損風險的能力。</span> </span> </div> <p class="text-2xl font-bold" style="color: var(--muted-foreground);">${sortino}</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, var(--accent) 8%, var(--background)) 0%, color-mix(in srgb, var(--accent) 4%, var(--background)) 100%); border-color: color-mix(in srgb, var(--accent) 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--accent);">過擬合(報酬率比)</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">${overfittingTooltip}</span> </span> </div> <p class="text-2xl font-bold" style="color: var(--accent);">${annReturnRatioStr}</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: color-mix(in srgb, var(--secondary) 6%, var(--background)); border-color: color-mix(in srgb, var(--secondary) 20%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--secondary);">過擬合(夏普值比)</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">${overfittingTooltip}</span> </span> </div> <p class="text-2xl font-bold" style="color: var(--secondary);">${sharpeRatioStr}</p> </div> </div> </div> </div>`; let tradeStatsHtml = ` <div class="mb-8"> <h4 class="text-lg font-semibold mb-6" style="color: var(--foreground);">交易統計</h4> <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: color-mix(in srgb, var(--muted) 12%, var(--background)); border-color: color-mix(in srgb, var(--border) 60%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--muted-foreground);">勝率</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">包含做多與做空交易</span> </span> </div> <p class="text-2xl font-bold" style="color: var(--foreground);">${winR}%</p> <p class="text-sm mt-1" style="color: var(--muted-foreground);">(${winTrades}/${totalTrades})</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: color-mix(in srgb, var(--muted) 12%, var(--background)); border-color: color-mix(in srgb, var(--border) 60%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--muted-foreground);">總交易次數</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">包含做多與做空交易</span> </span> </div> <p class="text-2xl font-bold" style="color: var(--foreground);">${totalTrades}</p> <p class="text-sm mt-1" style="color: var(--muted-foreground);">次</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: color-mix(in srgb, var(--muted) 12%, var(--background)); border-color: color-mix(in srgb, var(--border) 60%, transparent);"> <div class="text-center"> <p class="text-sm font-medium mb-3" style="color: var(--muted-foreground);">平均交易盈虧</p> <p class="text-2xl font-bold ${avgP>=0?'text-emerald-600':'text-rose-600'}">${avgP>=0?'+':''}${Math.round(avgP).toLocaleString()}元</p> <p class="text-sm mt-1" style="color: var(--muted-foreground);">元</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: color-mix(in srgb, var(--muted) 12%, var(--background)); border-color: color-mix(in srgb, var(--border) 60%, transparent);"> <div class="text-center"> <p class="text-sm font-medium mb-3" style="color: var(--muted-foreground);">最大連虧次數</p> <p class="text-2xl font-bold" style="color: var(--foreground);">${maxCL}</p> <p class="text-sm mt-1" style="color: var(--muted-foreground);">次</p> </div> </div> </div> </div>`; let strategySettingsHtml = ` <div> <h4 class="text-lg font-semibold mb-6" style="color: var(--foreground);">策略設定</h4> <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, #10b981 8%, var(--background)) 0%, color-mix(in srgb, #10b981 4%, var(--background)) 100%); border-color: color-mix(in srgb, #10b981 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium text-emerald-600">📈 進場策略</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">${entryDesc.desc.replace(/\n/g,'<br>')}</span> </span> </div> <p class="text-base font-semibold" style="color: var(--foreground);">${entryDesc.name}</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, #ef4444 8%, var(--background)) 0%, color-mix(in srgb, #ef4444 4%, var(--background)) 100%); border-color: color-mix(in srgb, #ef4444 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium text-rose-600">📉 出場策略</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">${exitDesc.desc.replace(/\n/g,'<br>')}</span> </span> </div> <p class="text-base font-semibold" style="color: var(--foreground);">${exitDesc.name}</p> </div> </div> ${ result.enableShorting && shortEntryDesc && shortExitDesc ? ` <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, var(--accent) 8%, var(--background)) 0%, color-mix(in srgb, var(--accent) 4%, var(--background)) 100%); border-color: color-mix(in srgb, var(--accent) 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--accent);">📉 做空策略</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">${shortEntryDesc.desc.replace(/\n/g,'<br>')}</span> </span> </div> <p class="text-base font-semibold" style="color: var(--foreground);">${shortEntryDesc.name}</p> </div> </div> <div class="p-6 rounded-xl border shadow-sm transition-all duration-200 hover:shadow-md" style="background: linear-gradient(135deg, color-mix(in srgb, var(--primary) 8%, var(--background)) 0%, color-mix(in srgb, var(--primary) 4%, var(--background)) 100%); border-color: color-mix(in srgb, var(--primary) 25%, transparent);"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm font-medium" style="color: var(--primary);">📈 回補策略</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs rounded-full cursor-help" style="background-color: var(--primary); color: var(--primary-foreground);">?</span> <span class="tooltiptext">${shortExitDesc.desc.replace(/\n/g,'<br>')}</span> </span> </div> <p class="text-base font-semibold" style="color: var(--foreground);">${shortExitDesc.name}</p> </div> </div>` : ` <div class="p-6 rounded-xl border shadow-sm" style="background: color-mix(in srgb, var(--muted) 15%, var(--background)); border-color: color-mix(in srgb, var(--border) 80%, transparent);"> <div class="text-center"> <p class="text-sm font-medium" style="color: var(--muted-foreground);">📉 做空策略未啟用</p> </div> </div> <div class="bg-gray-100 p-6 rounded-xl border border-gray-200 shadow-sm"> <div class="text-center"> <p class="text-sm text-gray-500 font-medium">📈 回補策略未啟用</p> </div> </div> `} <div class="bg-orange-50 p-6 rounded-xl border border-orange-200 shadow-sm"> <div class="text-center"> <div class="flex items-center justify-center mb-3"> <p class="text-sm text-orange-600 font-medium">⚠️ 全局風控</p> <span class="tooltip ml-2"> <span class="info-icon inline-flex items-center justify-center w-5 h-5 text-xs bg-blue-600 text-white rounded-full cursor-help">?</span> <span class="tooltiptext">停損/停利設定 (多空共用)</span> </span> </div> <p class="text-base font-semibold text-gray-800">損:${result.stopLoss>0?result.stopLoss+'%':'N/A'} / 利:${result.takeProfit>0?result.takeProfit+'%':'N/A'}</p> </div> </div> <div class="bg-indigo-50 p-6 rounded-xl border border-indigo-200 shadow-sm"> <div class="text-center"> <p class="text-sm text-indigo-600 font-medium mb-3">⏰ 買賣時間點</p> <p class="text-base font-semibold text-gray-800">${result.tradeTiming==='open'?'隔日開盤':'當日收盤'}</p> </div> </div> <div class="bg-blue-50 p-6 rounded-xl border border-blue-200 shadow-sm"> <div class="text-center"> <p class="text-sm text-blue-600 font-medium mb-3">💰 初始本金</p> <p class="text-base font-semibold text-gray-800">${result.initialCapital.toLocaleString()}元</p> </div> </div> <div class="bg-yellow-50 p-6 rounded-xl border border-yellow-200 shadow-sm"> <div class="text-center"> <p class="text-sm text-yellow-600 font-medium mb-3">🏆 最終資產</p> <p class="text-base font-semibold text-gray-800">${Math.round(finalValue).toLocaleString()}元</p> </div> </div> </div> </div>`; // 將四個區塊垂直排列，並添加適當的間距 el.innerHTML = ` <div class="space-y-8"> ${performanceHtml} ${riskHtml} ${tradeStatsHtml} ${strategySettingsHtml} </div> `; console.log("[Main] displayBacktestResult finished."); } const checkDisplay = (v) => v !== null && v !== undefined && !isNaN(v); const formatIndicatorValues = (indicatorValues) => { try { if (!indicatorValues || typeof indicatorValues !== 'object' || Object.keys(indicatorValues).length === 0) return ''; const formatV = (v) => checkDisplay(v) ? v.toFixed(2) : '--'; const parts = Object.entries(indicatorValues).map(([label, values]) => { if (Array.isArray(values) && values.length === 3) { return `<span class="mr-2 whitespace-nowrap text-xs" style="color: var(--muted-foreground);">${label}: ${formatV(values[0])} / ${formatV(values[1])} / ${formatV(values[2])}</span>`; } else if (checkDisplay(values)) { return `<span class="mr-2 whitespace-nowrap text-xs" style="color: var(--muted-foreground);">${label}: ${formatV(values)}</span>`; } else if (Array.isArray(values) && values.length === 2){ return `<span class="mr-2 whitespace-nowrap text-xs" style="color: var(--muted-foreground);">${label}: ${formatV(values[0])} / ${formatV(values[1])}</span>`; } return `<span class="mr-2 whitespace-nowrap text-xs" style="color: var(--muted-foreground);">${label}: ?</span>`; }).filter(part => part !== null); return parts.length > 0 ? '<div class="mt-1 text-xs" style="color: var(--muted-foreground);">(' + parts.join(' ') + ')</div>' : ''; } catch (e) { console.error("[Main] Error in formatIndicatorValues:", e, indicatorValues); return '<div class="mt-1 text-xs" style="color: #dc2626;">(指標值格式錯誤)</div>'; } }; const formatKDParams = (kdVals) => { try { if (!kdVals || typeof kdVals !== 'object') { console.warn("[Main] Invalid kdValues passed to formatKDParams:", kdVals); return ''; } const formatV = (v) => checkDisplay(v) ? v.toFixed(2) : '--'; const kPrev = kdVals?.kPrev; const dPrev = kdVals?.dPrev; const kNow = kdVals?.kNow; const dNow = kdVals?.dNow; const kNext = kdVals?.kNext; const dNext = kdVals?.dNext; return `<div class="mt-1 text-xs" style="color: var(--muted-foreground);"> (K/D 前:${formatV(kPrev)}/${formatV(dPrev)},當:${formatV(kNow)}/${formatV(dNow)}, 次:${formatV(kNext)}/${formatV(dNext)})</div>`; } catch (e) { console.error("[Main] Error in formatKDParams:", e, kdVals); return '<div class="mt-1 text-xs" style="color: #dc2626;">(KD值格式錯誤)</div>'; } }; const formatMACDParams = (macdValues) => { try { if (!macdValues || typeof macdValues !== 'object') { console.warn("[Main] Invalid macdValues passed to formatMACDParams:", macdValues); return ''; } const formatV = (v) => checkDisplay(v) ? v.toFixed(2) : '--'; const difPrev = macdValues?.difPrev; const deaPrev = macdValues?.deaPrev; const difNow = macdValues?.difNow; const deaNow = macdValues?.deaNow; const difNext = macdValues?.difNext; const deaNext = macdValues?.deaNext; return `<div class="mt-1 text-xs" style="color: var(--muted-foreground);"> (DIF/DEA 前:${formatV(difPrev)}/${formatV(deaPrev)},當:${formatV(difNow)}/${formatV(deaNow)}, 次:${formatV(difNext)}/${formatV(deaNext)})</div>`; } catch (e) { console.error("[Main] Error in formatMACDParams:", e, macdValues); return '<div class="mt-1 text-xs" style="color: #dc2626;">(MACD值格式錯誤)</div>'; } }; function displayTradeResults(result) { console.log("[Main] displayTradeResults called"); const tradeResultsEl = document.getElementById("trade-results"); if (!tradeResultsEl) { console.error("[Main] Element 'trade-results' not found"); return; } const tradeTiming = result?.tradeTiming; if (!result || !result.completedTrades || !Array.isArray(result.completedTrades)) { tradeResultsEl.innerHTML = `<p class="text-xs text-muted-foreground text-center py-8" style="color: var(--muted-foreground);">交易記錄數據無效或缺失</p>`; console.error("[Main] Invalid completedTrades data:", result); return; } if (result.completedTrades.length === 0) { tradeResultsEl.innerHTML = `<p class="text-xs text-muted-foreground text-center py-8" style="color: var(--muted-foreground);">沒有交易記錄</p>`; return; } try { let tradeHtml = result.completedTrades.map((tradePair, index) => { if (!tradePair || !tradePair.entry || !tradePair.exit || !tradePair.entry.type || !tradePair.exit.type) { console.warn(`[Main] Invalid trade pair structure at index ${index}:`, tradePair); return `<div class="trade-signal p-3 border-b last:border-b-0" style="border-color: var(--border);"><p class="text-xs text-red-600">錯誤：此筆交易對數據結構不完整 (Index: ${index})</p></div>`; } try { const entryTrade = tradePair.entry; const exitTrade = tradePair.exit; const profit = tradePair.profit; const profitPercent = tradePair.profitPercent; const isShortTrade = entryTrade.type === 'short'; let entryParamsDisplay = ''; try { if (entryTrade?.kdValues) entryParamsDisplay = formatKDParams(entryTrade.kdValues); else if (entryTrade?.macdValues) entryParamsDisplay = formatMACDParams(entryTrade.macdValues); else if (entryTrade?.indicatorValues) entryParamsDisplay = formatIndicatorValues(entryTrade.indicatorValues); } catch (entryFormatError) { console.error(`[Main] Error formatting entry display for trade index ${index}:`, entryFormatError, entryTrade); entryParamsDisplay = '<span class="block text-xs text-red-500 mt-1">(進場信息格式錯誤)</span>'; } let exitParamsDisplay = ''; const sl = exitTrade?.triggeredByStopLoss || false; const tp = exitTrade?.triggeredByTakeProfit || false; let trigger = ''; if(sl) trigger='<span class="ml-2 text-xs font-medium px-2 py-0.5 rounded" style="background-color: #fee2e2; color: #dc2626;">🛑停損</span>'; else if(tp) trigger='<span class="ml-2 text-xs font-medium px-2 py-0.5 rounded" style="background-color: #dcfce7; color: #16a34a;">✅停利</span>'; try { if (exitTrade?.kdValues) exitParamsDisplay = formatKDParams(exitTrade.kdValues); else if (exitTrade?.macdValues) exitParamsDisplay = formatMACDParams(exitTrade.macdValues); else if (exitTrade?.indicatorValues) exitParamsDisplay = formatIndicatorValues(exitTrade.indicatorValues); } catch (exitFormatError) { console.error(`[Main] Error formatting exit display for trade index ${index}:`, exitFormatError, exitTrade); exitParamsDisplay = '<span class="block text-xs text-red-500 mt-1">(出場信息格式錯誤)</span>'; } const entryDate = entryTrade.date || 'N/A'; const entryPrice = typeof entryTrade.price === 'number' ? entryTrade.price.toFixed(2) : 'N/A'; const entryShares = entryTrade.shares || 'N/A'; const entryActionText = isShortTrade ? '做空' : '買入'; const entryActionClass = isShortTrade ? 'short-signal' : 'buy-signal'; const entryActionStyle = isShortTrade ? 'background-color: #fef3c7; color: #d97706;' : 'background-color: #fee2e2; color: #dc2626;'; const exitDate = exitTrade.date || 'N/A'; const exitPrice = typeof exitTrade.price === 'number' ? exitTrade.price.toFixed(2) : 'N/A'; const exitActionText = isShortTrade ? '回補' : '賣出'; const exitActionClass = isShortTrade ? 'cover-signal' : 'sell-signal'; const exitActionStyle = isShortTrade ? 'background-color: #e0e7ff; color: #7c3aed;' : 'background-color: #dcfce7; color: #16a34a;'; const profitValue = typeof profit === 'number' ? Math.round(profit) : 'N/A'; const profitColor = typeof profit === 'number' ? (profit >= 0 ? '#16a34a' : '#dc2626') : 'var(--foreground)'; const profitSign = typeof profit === 'number' ? (profit >= 0 ? '+' : '') : ''; return ` <div class="trade-signal py-3 px-4 border-b last:border-b-0 hover:bg-opacity-50 transition duration-150" style="border-color: var(--border); background-color: var(--background);" onmouseover="this.style.backgroundColor='var(--muted)'" onmouseout="this.style.backgroundColor='var(--background)'"> <div class="mb-2"> <div class="flex justify-between items-center flex-wrap gap-2"> <div class="flex items-center gap-2"> <span class="text-xs" style="color: var(--muted-foreground);">${entryDate}</span> <span class="trade-action text-xs font-medium px-2 py-1 rounded ${entryActionClass}" style="${entryActionStyle}">${entryActionText}</span> <span class="text-sm font-semibold" style="color: var(--foreground);">${entryPrice}</span> <span class="text-xs" style="color: var(--muted-foreground);">${entryShares} 股</span> </div> </div> ${entryParamsDisplay} </div> <div> <div class="flex justify-between items-center flex-wrap gap-2"> <div class="flex items-center gap-2"> <span class="text-xs" style="color: var(--muted-foreground);">${exitDate}</span> <span class="trade-action text-xs font-medium px-2 py-1 rounded ${exitActionClass}" style="${exitActionStyle}">${exitActionText}</span> <span class="text-sm font-semibold" style="color: var(--foreground);">${exitPrice}</span> </div> <div class="flex items-center"> <span class="text-sm font-bold" style="color: ${profitColor};">${profitSign}${profitValue}元</span> ${trigger} </div> </div> ${exitParamsDisplay} </div> </div> `; } catch (mapError) { console.error(`[Main] Error formatting trade pair at index ${index}:`, mapError); console.error("[Main] Problematic trade pair object:", tradePair); return `<div class="trade-signal p-3 border-b" style="border-color: var(--border);"><p class="text-xs text-red-600">錯誤：格式化此筆交易對時出錯 (Index: ${index})</p></div>`; } }).join(''); tradeResultsEl.innerHTML = `<div class="trade-list rounded-md max-h-80 overflow-y-auto" style="border: 1px solid var(--border);">${tradeHtml}</div>`; } catch (error) { console.error("[Main] Error rendering trade results list:", error); tradeResultsEl.innerHTML = `<p class="text-xs text-red-600 text-center py-8">顯示交易記錄列表時發生錯誤。</p>`; showError("顯示交易記錄時出錯，請檢查控制台。"); } } function renderChart(result) { const chartContainer = document.getElementById('chart-container'); if (!chartContainer) { console.error("[Main] Chart container not found"); return; } if (!result || !result.dates || result.dates.length === 0) { chartContainer.innerHTML = `<div class="text-center text-muted py-8" style="color: var(--muted-foreground);"><i data-lucide="bar-chart-3" class="lucide w-12 h-12 mx-auto mb-2 opacity-50"></i><p>無法渲染圖表：數據不足。</p></div>`; if (typeof lucide !== 'undefined' && lucide.createIcons) { lucide.createIcons(); } return; } chartContainer.innerHTML = '<canvas id="chart" class="w-full h-full absolute inset-0"></canvas>'; const chartElement = document.getElementById('chart'); if (!chartElement) { console.error("[Main] Failed to create chart canvas element"); return; } const ctx = chartElement.getContext('2d'); if (stockChart) { stockChart.destroy(); stockChart = null; } const dates = result.dates; const check = (v) => v !== null && !isNaN(v) && isFinite(v); const validReturns = result.strategyReturns.map((v, i) => ({ index: i, value: check(v) ? parseFloat(v) : null })).filter(item => item.value !== null); if (validReturns.length === 0) { console.warn("[Main] No valid strategy return data points to render chart."); return; } const firstValidReturnIndex = validReturns[0].index; const lastValidReturnIndex = validReturns[validReturns.length - 1].index; const filterSignals = (signals) => { return (signals || []).filter(s => s.index >= firstValidReturnIndex && s.index <= lastValidReturnIndex && check(result.strategyReturns[s.index])).map(s => ({ x: dates[s.index], y: result.strategyReturns[s.index] })); }; const buySigs = filterSignals(result.chartBuySignals); const sellSigs = filterSignals(result.chartSellSignals); const shortSigs = filterSignals(result.chartShortSignals); const coverSigs = filterSignals(result.chartCoverSignals); const stratData = result.strategyReturns.map(v => check(v) ? parseFloat(v) : null); const bhData = result.buyHoldReturns.map(v => check(v) ? parseFloat(v) : null); const datasets = [ { label: '買入並持有 %', data: bhData, borderColor: '#6b7280', borderWidth: 1.5, tension: 0.1, pointRadius: 0, yAxisID: 'y', spanGaps: true }, { label: '策略 %', data: stratData, borderColor: '#3b82f6', borderWidth: 2, tension: 0.1, pointRadius: 0, yAxisID: 'y', spanGaps: true } ]; if (buySigs.length > 0) { datasets.push({ type:'scatter', label:'買入', data:buySigs, backgroundColor:'#ef4444', radius:6, pointStyle:'triangle', rotation:0, yAxisID:'y' }); } if (sellSigs.length > 0) { datasets.push({ type:'scatter', label:'賣出', data:sellSigs, backgroundColor:'#22c55e', radius:6, pointStyle:'triangle', rotation:180, yAxisID:'y' }); } if (result.enableShorting) { if (shortSigs.length > 0) { datasets.push({ type:'scatter', label:'做空', data:shortSigs, backgroundColor:'#f59e0b', radius:7, pointStyle:'rectRot', yAxisID:'y' }); } if (coverSigs.length > 0) { datasets.push({ type:'scatter', label:'回補', data:coverSigs, backgroundColor:'#8b5cf6', radius:7, pointStyle:'rect', yAxisID:'y' }); } } console.log('Creating chart with plugins:', Chart.registry.plugins.items); stockChart = new Chart(ctx, { type: 'line', data: { labels: dates, datasets: datasets }, options: { responsive: true, maintainAspectRatio: false, onHover: (event, activeElements) => { event.native.target.style.cursor = activeElements.length > 0 ? 'pointer' : 'grab'; }, interaction: { mode: 'index', intersect: false, }, plugins: { legend: { position: 'top', labels: { usePointStyle: true } }, tooltip: { mode: 'index', intersect: false, }, zoom: { pan: { enabled: true, mode: 'x' }, zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'x' } } } }, scales: { y: { type: 'linear', display: true, position: 'left', title: { display: true, text: '收益率 (%)' }, ticks: { callback: v => v + '%' }, grid: { color: '#e5e7eb' } }, x: { type: 'category', grid: { display: false }, ticks: { autoSkip: true, maxTicksLimit: 15, maxRotation: 40, minRotation: 0 } } } }); const canvas = stockChart.canvas; let isPanning = false; let lastX = 0; canvas.addEventListener('mousedown', (e) => { if (e.button === 0 || e.button === 2) { isPanning = true; lastX = e.clientX; canvas.style.cursor = 'grabbing'; e.preventDefault(); } }); canvas.addEventListener('mousemove', (e) => { if (isPanning) { const deltaX = e.clientX - lastX; const scale = stockChart.scales.x; const canvasPosition = Chart.helpers.getRelativePosition(e, stockChart); const dataX = scale.getValueForPixel(canvasPosition.x); const range = scale.max - scale.min; const panAmount = (deltaX / canvas.width) * range; stockChart.zoomScale('x', {min: scale.min - panAmount, max: scale.max - panAmount}, 'none'); lastX = e.clientX; e.preventDefault(); } }); canvas.addEventListener('mouseup', (e) => { isPanning = false; canvas.style.cursor = 'grab'; }); canvas.addEventListener('mouseleave', (e) => { isPanning = false; canvas.style.cursor = 'default'; }); canvas.addEventListener('contextmenu', (e) => { e.preventDefault(); }); } // 優化專用進度顯示函數 function showOptimizationProgress(message) { console.log('[Main] showOptimizationProgress 被調用:', message); const progressSection = document.getElementById('optimization-progress-section'); const statusText = document.getElementById('optimization-status-text'); const progressBar = document.getElementById('optimization-progress-bar'); const progressText = document.getElementById('optimization-progress-text'); console.log('[Main] 進度元素檢查:', { progressSection: !!progressSection, statusText: !!statusText, progressBar: !!progressBar, progressText: !!progressText }); if (progressSection && statusText) { progressSection.classList.remove('hidden'); statusText.textContent = message || '⌛ 優化進行中...'; if (progressBar) progressBar.style.width = '0%'; if (progressText) progressText.textContent = '0%'; console.log('[Main] 顯示優化進度:', message); console.log('[Main] 進度區域 class list:', progressSection.classList.toString()); } else { console.error('[Main] 無法找到優化進度顯示元素!'); } } function updateOptimizationProgress(progress, message) { const progressBar = document.getElementById('optimization-progress-bar'); const progressText = document.getElementById('optimization-progress-text'); const statusText = document.getElementById('optimization-status-text'); const safeProgress = Math.max(0, Math.min(100, progress || 0)); if (progressBar) { progressBar.style.width = `${safeProgress}%`; } if (progressText) { progressText.textContent = `${Math.round(safeProgress)}%`; } if (statusText && message) { statusText.textContent = message; } console.log(`[Main] 更新優化進度: ${safeProgress}%`, message); } function hideOptimizationProgress() { console.log('[Main] hideOptimizationProgress 被調用'); const progressSection = document.getElementById('optimization-progress-section'); if (progressSection) { progressSection.classList.add('hidden'); console.log('[Main] 隱藏優化進度顯示'); console.log('[Main] 進度區域 class list:', progressSection.classList.toString()); } else { console.error('[Main] 找不到 optimization-progress-section 元素'); } } function runOptimizationInternal(optimizeType) { if (!workerUrl) { showError(